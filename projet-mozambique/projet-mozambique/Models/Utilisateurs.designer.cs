#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18051
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace projet_mozambique.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MVP")]
	public partial class UtilisateursDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertUTILISATEUR(UTILISATEUR instance);
    partial void UpdateUTILISATEUR(UTILISATEUR instance);
    partial void DeleteUTILISATEUR(UTILISATEUR instance);
    partial void InsertROLE(ROLE instance);
    partial void UpdateROLE(ROLE instance);
    partial void DeleteROLE(ROLE instance);
    partial void InsertROLEDROIT(ROLEDROIT instance);
    partial void UpdateROLEDROIT(ROLEDROIT instance);
    partial void DeleteROLEDROIT(ROLEDROIT instance);
    partial void InsertDROIT(DROIT instance);
    partial void UpdateDROIT(DROIT instance);
    partial void DeleteDROIT(DROIT instance);
    partial void InsertECOLE(ECOLE instance);
    partial void UpdateECOLE(ECOLE instance);
    partial void DeleteECOLE(ECOLE instance);
    partial void InsertUTILISATEURSECTEUR(UTILISATEURSECTEUR instance);
    partial void UpdateUTILISATEURSECTEUR(UTILISATEURSECTEUR instance);
    partial void DeleteUTILISATEURSECTEUR(UTILISATEURSECTEUR instance);
    partial void InsertSECTEUR(SECTEUR instance);
    partial void UpdateSECTEUR(SECTEUR instance);
    partial void DeleteSECTEUR(SECTEUR instance);
    #endregion
		
		public UtilisateursDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionStringName"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UtilisateursDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UtilisateursDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UtilisateursDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UtilisateursDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UTILISATEUR> UTILISATEUR
		{
			get
			{
				return this.GetTable<UTILISATEUR>();
			}
		}
		
		public System.Data.Linq.Table<ROLE> ROLE
		{
			get
			{
				return this.GetTable<ROLE>();
			}
		}
		
		public System.Data.Linq.Table<ROLEDROIT> ROLEDROIT
		{
			get
			{
				return this.GetTable<ROLEDROIT>();
			}
		}
		
		public System.Data.Linq.Table<DROIT> DROIT
		{
			get
			{
				return this.GetTable<DROIT>();
			}
		}
		
		public System.Data.Linq.Table<ECOLE> ECOLE
		{
			get
			{
				return this.GetTable<ECOLE>();
			}
		}
		
		public System.Data.Linq.Table<UTILISATEURSECTEUR> UTILISATEURSECTEUR
		{
			get
			{
				return this.GetTable<UTILISATEURSECTEUR>();
			}
		}
		
		public System.Data.Linq.Table<SECTEUR> SECTEUR
		{
			get
			{
				return this.GetTable<SECTEUR>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTILISATEUR")]
	public partial class UTILISATEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NOMUTIL;
		
		private string _MOTPASSE;
		
		private string _COURRIEL;
		
		private string _PRENOM;
		
		private string _NOM;
		
		private string _ADRESSE;
		
		private string _VILLE;
		
		private System.DateTime _DATENAISSANCE;
		
		private System.DateTime _DATECREATION;
		
		private System.Nullable<System.DateTime> _DERNIERECONNEXION;
		
		private bool _COMPTEACTIF;
		
		private string _LANGUE;
		
		private int _IDROLE;
		
		private int _IDECOLE;
		
		private bool _REINITIALISERMOTPASSE;
		
		private EntitySet<UTILISATEURSECTEUR> _UTILISATEURSECTEUR;
		
		private EntityRef<ROLE> _ROLE;
		
		private EntityRef<ECOLE> _ECOLE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNOMUTILChanging(string value);
    partial void OnNOMUTILChanged();
    partial void OnMOTPASSEChanging(string value);
    partial void OnMOTPASSEChanged();
    partial void OnCOURRIELChanging(string value);
    partial void OnCOURRIELChanged();
    partial void OnPRENOMChanging(string value);
    partial void OnPRENOMChanged();
    partial void OnNOMChanging(string value);
    partial void OnNOMChanged();
    partial void OnADRESSEChanging(string value);
    partial void OnADRESSEChanged();
    partial void OnVILLEChanging(string value);
    partial void OnVILLEChanged();
    partial void OnDATENAISSANCEChanging(System.DateTime value);
    partial void OnDATENAISSANCEChanged();
    partial void OnDATECREATIONChanging(System.DateTime value);
    partial void OnDATECREATIONChanged();
    partial void OnDERNIERECONNEXIONChanging(System.Nullable<System.DateTime> value);
    partial void OnDERNIERECONNEXIONChanged();
    partial void OnCOMPTEACTIFChanging(bool value);
    partial void OnCOMPTEACTIFChanged();
    partial void OnLANGUEChanging(string value);
    partial void OnLANGUEChanged();
    partial void OnIDROLEChanging(int value);
    partial void OnIDROLEChanged();
    partial void OnIDECOLEChanging(int value);
    partial void OnIDECOLEChanged();
    partial void OnREINITIALISERMOTPASSEChanging(bool value);
    partial void OnREINITIALISERMOTPASSEChanged();
    #endregion
		
		public UTILISATEUR()
		{
			this._UTILISATEURSECTEUR = new EntitySet<UTILISATEURSECTEUR>(new Action<UTILISATEURSECTEUR>(this.attach_UTILISATEURSECTEUR), new Action<UTILISATEURSECTEUR>(this.detach_UTILISATEURSECTEUR));
			this._ROLE = default(EntityRef<ROLE>);
			this._ECOLE = default(EntityRef<ECOLE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMUTIL", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string NOMUTIL
		{
			get
			{
				return this._NOMUTIL;
			}
			set
			{
				if ((this._NOMUTIL != value))
				{
					this.OnNOMUTILChanging(value);
					this.SendPropertyChanging();
					this._NOMUTIL = value;
					this.SendPropertyChanged("NOMUTIL");
					this.OnNOMUTILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOTPASSE", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string MOTPASSE
		{
			get
			{
				return this._MOTPASSE;
			}
			set
			{
				if ((this._MOTPASSE != value))
				{
					this.OnMOTPASSEChanging(value);
					this.SendPropertyChanging();
					this._MOTPASSE = value;
					this.SendPropertyChanged("MOTPASSE");
					this.OnMOTPASSEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COURRIEL", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string COURRIEL
		{
			get
			{
				return this._COURRIEL;
			}
			set
			{
				if ((this._COURRIEL != value))
				{
					this.OnCOURRIELChanging(value);
					this.SendPropertyChanging();
					this._COURRIEL = value;
					this.SendPropertyChanged("COURRIEL");
					this.OnCOURRIELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRENOM", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string PRENOM
		{
			get
			{
				return this._PRENOM;
			}
			set
			{
				if ((this._PRENOM != value))
				{
					this.OnPRENOMChanging(value);
					this.SendPropertyChanging();
					this._PRENOM = value;
					this.SendPropertyChanged("PRENOM");
					this.OnPRENOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string NOM
		{
			get
			{
				return this._NOM;
			}
			set
			{
				if ((this._NOM != value))
				{
					this.OnNOMChanging(value);
					this.SendPropertyChanging();
					this._NOM = value;
					this.SendPropertyChanged("NOM");
					this.OnNOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADRESSE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADRESSE
		{
			get
			{
				return this._ADRESSE;
			}
			set
			{
				if ((this._ADRESSE != value))
				{
					this.OnADRESSEChanging(value);
					this.SendPropertyChanging();
					this._ADRESSE = value;
					this.SendPropertyChanged("ADRESSE");
					this.OnADRESSEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VILLE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VILLE
		{
			get
			{
				return this._VILLE;
			}
			set
			{
				if ((this._VILLE != value))
				{
					this.OnVILLEChanging(value);
					this.SendPropertyChanging();
					this._VILLE = value;
					this.SendPropertyChanged("VILLE");
					this.OnVILLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATENAISSANCE", DbType="Date NOT NULL")]
		public System.DateTime DATENAISSANCE
		{
			get
			{
				return this._DATENAISSANCE;
			}
			set
			{
				if ((this._DATENAISSANCE != value))
				{
					this.OnDATENAISSANCEChanging(value);
					this.SendPropertyChanging();
					this._DATENAISSANCE = value;
					this.SendPropertyChanged("DATENAISSANCE");
					this.OnDATENAISSANCEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATECREATION", DbType="Date NOT NULL")]
		public System.DateTime DATECREATION
		{
			get
			{
				return this._DATECREATION;
			}
			set
			{
				if ((this._DATECREATION != value))
				{
					this.OnDATECREATIONChanging(value);
					this.SendPropertyChanging();
					this._DATECREATION = value;
					this.SendPropertyChanged("DATECREATION");
					this.OnDATECREATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DERNIERECONNEXION", DbType="DateTime")]
		public System.Nullable<System.DateTime> DERNIERECONNEXION
		{
			get
			{
				return this._DERNIERECONNEXION;
			}
			set
			{
				if ((this._DERNIERECONNEXION != value))
				{
					this.OnDERNIERECONNEXIONChanging(value);
					this.SendPropertyChanging();
					this._DERNIERECONNEXION = value;
					this.SendPropertyChanged("DERNIERECONNEXION");
					this.OnDERNIERECONNEXIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMPTEACTIF", DbType="Bit NOT NULL")]
		public bool COMPTEACTIF
		{
			get
			{
				return this._COMPTEACTIF;
			}
			set
			{
				if ((this._COMPTEACTIF != value))
				{
					this.OnCOMPTEACTIFChanging(value);
					this.SendPropertyChanging();
					this._COMPTEACTIF = value;
					this.SendPropertyChanged("COMPTEACTIF");
					this.OnCOMPTEACTIFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LANGUE", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string LANGUE
		{
			get
			{
				return this._LANGUE;
			}
			set
			{
				if ((this._LANGUE != value))
				{
					this.OnLANGUEChanging(value);
					this.SendPropertyChanging();
					this._LANGUE = value;
					this.SendPropertyChanged("LANGUE");
					this.OnLANGUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDROLE", DbType="Int NOT NULL")]
		public int IDROLE
		{
			get
			{
				return this._IDROLE;
			}
			set
			{
				if ((this._IDROLE != value))
				{
					if (this._ROLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDROLEChanging(value);
					this.SendPropertyChanging();
					this._IDROLE = value;
					this.SendPropertyChanged("IDROLE");
					this.OnIDROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDECOLE", DbType="Int NOT NULL")]
		public int IDECOLE
		{
			get
			{
				return this._IDECOLE;
			}
			set
			{
				if ((this._IDECOLE != value))
				{
					if (this._ECOLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDECOLEChanging(value);
					this.SendPropertyChanging();
					this._IDECOLE = value;
					this.SendPropertyChanged("IDECOLE");
					this.OnIDECOLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REINITIALISERMOTPASSE", DbType="Bit NOT NULL")]
		public bool REINITIALISERMOTPASSE
		{
			get
			{
				return this._REINITIALISERMOTPASSE;
			}
			set
			{
				if ((this._REINITIALISERMOTPASSE != value))
				{
					this.OnREINITIALISERMOTPASSEChanging(value);
					this.SendPropertyChanging();
					this._REINITIALISERMOTPASSE = value;
					this.SendPropertyChanged("REINITIALISERMOTPASSE");
					this.OnREINITIALISERMOTPASSEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_UTILISATEURSECTEUR", Storage="_UTILISATEURSECTEUR", ThisKey="ID", OtherKey="IDUTILISATEUR")]
		public EntitySet<UTILISATEURSECTEUR> UTILISATEURSECTEUR
		{
			get
			{
				return this._UTILISATEURSECTEUR;
			}
			set
			{
				this._UTILISATEURSECTEUR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_UTILISATEUR", Storage="_ROLE", ThisKey="IDROLE", OtherKey="ID", IsForeignKey=true)]
		public ROLE ROLE
		{
			get
			{
				return this._ROLE.Entity;
			}
			set
			{
				ROLE previousValue = this._ROLE.Entity;
				if (((previousValue != value) 
							|| (this._ROLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROLE.Entity = null;
						previousValue.UTILISATEUR.Remove(this);
					}
					this._ROLE.Entity = value;
					if ((value != null))
					{
						value.UTILISATEUR.Add(this);
						this._IDROLE = value.ID;
					}
					else
					{
						this._IDROLE = default(int);
					}
					this.SendPropertyChanged("ROLE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECOLE_UTILISATEUR", Storage="_ECOLE", ThisKey="IDECOLE", OtherKey="ID", IsForeignKey=true)]
		public ECOLE ECOLE
		{
			get
			{
				return this._ECOLE.Entity;
			}
			set
			{
				ECOLE previousValue = this._ECOLE.Entity;
				if (((previousValue != value) 
							|| (this._ECOLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ECOLE.Entity = null;
						previousValue.UTILISATEUR.Remove(this);
					}
					this._ECOLE.Entity = value;
					if ((value != null))
					{
						value.UTILISATEUR.Add(this);
						this._IDECOLE = value.ID;
					}
					else
					{
						this._IDECOLE = default(int);
					}
					this.SendPropertyChanged("ECOLE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UTILISATEURSECTEUR(UTILISATEURSECTEUR entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = this;
		}
		
		private void detach_UTILISATEURSECTEUR(UTILISATEURSECTEUR entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLE")]
	public partial class ROLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NOM;
		
		private EntitySet<UTILISATEUR> _UTILISATEUR;
		
		private EntitySet<ROLEDROIT> _ROLEDROIT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNOMChanging(string value);
    partial void OnNOMChanged();
    #endregion
		
		public ROLE()
		{
			this._UTILISATEUR = new EntitySet<UTILISATEUR>(new Action<UTILISATEUR>(this.attach_UTILISATEUR), new Action<UTILISATEUR>(this.detach_UTILISATEUR));
			this._ROLEDROIT = new EntitySet<ROLEDROIT>(new Action<ROLEDROIT>(this.attach_ROLEDROIT), new Action<ROLEDROIT>(this.detach_ROLEDROIT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string NOM
		{
			get
			{
				return this._NOM;
			}
			set
			{
				if ((this._NOM != value))
				{
					this.OnNOMChanging(value);
					this.SendPropertyChanging();
					this._NOM = value;
					this.SendPropertyChanged("NOM");
					this.OnNOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_UTILISATEUR", Storage="_UTILISATEUR", ThisKey="ID", OtherKey="IDROLE")]
		public EntitySet<UTILISATEUR> UTILISATEUR
		{
			get
			{
				return this._UTILISATEUR;
			}
			set
			{
				this._UTILISATEUR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_ROLEDROIT", Storage="_ROLEDROIT", ThisKey="ID", OtherKey="IDROLE")]
		public EntitySet<ROLEDROIT> ROLEDROIT
		{
			get
			{
				return this._ROLEDROIT;
			}
			set
			{
				this._ROLEDROIT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UTILISATEUR(UTILISATEUR entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = this;
		}
		
		private void detach_UTILISATEUR(UTILISATEUR entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = null;
		}
		
		private void attach_ROLEDROIT(ROLEDROIT entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = this;
		}
		
		private void detach_ROLEDROIT(ROLEDROIT entity)
		{
			this.SendPropertyChanging();
			entity.ROLE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLEDROIT")]
	public partial class ROLEDROIT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDROLE;
		
		private int _IDDROIT;
		
		private EntityRef<ROLE> _ROLE;
		
		private EntityRef<DROIT> _DROIT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDROLEChanging(int value);
    partial void OnIDROLEChanged();
    partial void OnIDDROITChanging(int value);
    partial void OnIDDROITChanged();
    #endregion
		
		public ROLEDROIT()
		{
			this._ROLE = default(EntityRef<ROLE>);
			this._DROIT = default(EntityRef<DROIT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDROLE", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDROLE
		{
			get
			{
				return this._IDROLE;
			}
			set
			{
				if ((this._IDROLE != value))
				{
					if (this._ROLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDROLEChanging(value);
					this.SendPropertyChanging();
					this._IDROLE = value;
					this.SendPropertyChanged("IDROLE");
					this.OnIDROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDROIT", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDDROIT
		{
			get
			{
				return this._IDDROIT;
			}
			set
			{
				if ((this._IDDROIT != value))
				{
					if (this._DROIT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDROITChanging(value);
					this.SendPropertyChanging();
					this._IDDROIT = value;
					this.SendPropertyChanged("IDDROIT");
					this.OnIDDROITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLE_ROLEDROIT", Storage="_ROLE", ThisKey="IDROLE", OtherKey="ID", IsForeignKey=true)]
		public ROLE ROLE
		{
			get
			{
				return this._ROLE.Entity;
			}
			set
			{
				ROLE previousValue = this._ROLE.Entity;
				if (((previousValue != value) 
							|| (this._ROLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROLE.Entity = null;
						previousValue.ROLEDROIT.Remove(this);
					}
					this._ROLE.Entity = value;
					if ((value != null))
					{
						value.ROLEDROIT.Add(this);
						this._IDROLE = value.ID;
					}
					else
					{
						this._IDROLE = default(int);
					}
					this.SendPropertyChanged("ROLE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DROIT_ROLEDROIT", Storage="_DROIT", ThisKey="IDDROIT", OtherKey="ID", IsForeignKey=true)]
		public DROIT DROIT
		{
			get
			{
				return this._DROIT.Entity;
			}
			set
			{
				DROIT previousValue = this._DROIT.Entity;
				if (((previousValue != value) 
							|| (this._DROIT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DROIT.Entity = null;
						previousValue.ROLEDROIT.Remove(this);
					}
					this._DROIT.Entity = value;
					if ((value != null))
					{
						value.ROLEDROIT.Add(this);
						this._IDDROIT = value.ID;
					}
					else
					{
						this._IDDROIT = default(int);
					}
					this.SendPropertyChanged("DROIT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DROIT")]
	public partial class DROIT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TYPE;
		
		private string _DESCRIPTION;
		
		private EntitySet<ROLEDROIT> _ROLEDROIT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTYPEChanging(string value);
    partial void OnTYPEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    #endregion
		
		public DROIT()
		{
			this._ROLEDROIT = new EntitySet<ROLEDROIT>(new Action<ROLEDROIT>(this.attach_ROLEDROIT), new Action<ROLEDROIT>(this.detach_ROLEDROIT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this.OnTYPEChanging(value);
					this.SendPropertyChanging();
					this._TYPE = value;
					this.SendPropertyChanged("TYPE");
					this.OnTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTION", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DROIT_ROLEDROIT", Storage="_ROLEDROIT", ThisKey="ID", OtherKey="IDDROIT")]
		public EntitySet<ROLEDROIT> ROLEDROIT
		{
			get
			{
				return this._ROLEDROIT;
			}
			set
			{
				this._ROLEDROIT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ROLEDROIT(ROLEDROIT entity)
		{
			this.SendPropertyChanging();
			entity.DROIT = this;
		}
		
		private void detach_ROLEDROIT(ROLEDROIT entity)
		{
			this.SendPropertyChanging();
			entity.DROIT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ECOLE")]
	public partial class ECOLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NOM;
		
		private string _ADRESSE;
		
		private string _VILLE;
		
		private EntitySet<UTILISATEUR> _UTILISATEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNOMChanging(string value);
    partial void OnNOMChanged();
    partial void OnADRESSEChanging(string value);
    partial void OnADRESSEChanged();
    partial void OnVILLEChanging(string value);
    partial void OnVILLEChanged();
    #endregion
		
		public ECOLE()
		{
			this._UTILISATEUR = new EntitySet<UTILISATEUR>(new Action<UTILISATEUR>(this.attach_UTILISATEUR), new Action<UTILISATEUR>(this.detach_UTILISATEUR));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string NOM
		{
			get
			{
				return this._NOM;
			}
			set
			{
				if ((this._NOM != value))
				{
					this.OnNOMChanging(value);
					this.SendPropertyChanging();
					this._NOM = value;
					this.SendPropertyChanged("NOM");
					this.OnNOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADRESSE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADRESSE
		{
			get
			{
				return this._ADRESSE;
			}
			set
			{
				if ((this._ADRESSE != value))
				{
					this.OnADRESSEChanging(value);
					this.SendPropertyChanging();
					this._ADRESSE = value;
					this.SendPropertyChanged("ADRESSE");
					this.OnADRESSEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VILLE", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string VILLE
		{
			get
			{
				return this._VILLE;
			}
			set
			{
				if ((this._VILLE != value))
				{
					this.OnVILLEChanging(value);
					this.SendPropertyChanging();
					this._VILLE = value;
					this.SendPropertyChanged("VILLE");
					this.OnVILLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECOLE_UTILISATEUR", Storage="_UTILISATEUR", ThisKey="ID", OtherKey="IDECOLE")]
		public EntitySet<UTILISATEUR> UTILISATEUR
		{
			get
			{
				return this._UTILISATEUR;
			}
			set
			{
				this._UTILISATEUR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UTILISATEUR(UTILISATEUR entity)
		{
			this.SendPropertyChanging();
			entity.ECOLE = this;
		}
		
		private void detach_UTILISATEUR(UTILISATEUR entity)
		{
			this.SendPropertyChanging();
			entity.ECOLE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTILISATEURSECTEUR")]
	public partial class UTILISATEURSECTEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUTILISATEUR;
		
		private int _IDSECTEUR;
		
		private System.DateTime _DEBUTACCES;
		
		private System.DateTime _FINACCES;
		
		private EntityRef<UTILISATEUR> _UTILISATEUR;
		
		private EntityRef<SECTEUR> _SECTEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUTILISATEURChanging(int value);
    partial void OnIDUTILISATEURChanged();
    partial void OnIDSECTEURChanging(int value);
    partial void OnIDSECTEURChanged();
    partial void OnDEBUTACCESChanging(System.DateTime value);
    partial void OnDEBUTACCESChanged();
    partial void OnFINACCESChanging(System.DateTime value);
    partial void OnFINACCESChanged();
    #endregion
		
		public UTILISATEURSECTEUR()
		{
			this._UTILISATEUR = default(EntityRef<UTILISATEUR>);
			this._SECTEUR = default(EntityRef<SECTEUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUTILISATEUR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDUTILISATEUR
		{
			get
			{
				return this._IDUTILISATEUR;
			}
			set
			{
				if ((this._IDUTILISATEUR != value))
				{
					if (this._UTILISATEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUTILISATEURChanging(value);
					this.SendPropertyChanging();
					this._IDUTILISATEUR = value;
					this.SendPropertyChanged("IDUTILISATEUR");
					this.OnIDUTILISATEURChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSECTEUR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSECTEUR
		{
			get
			{
				return this._IDSECTEUR;
			}
			set
			{
				if ((this._IDSECTEUR != value))
				{
					if (this._SECTEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSECTEURChanging(value);
					this.SendPropertyChanging();
					this._IDSECTEUR = value;
					this.SendPropertyChanged("IDSECTEUR");
					this.OnIDSECTEURChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEBUTACCES", DbType="Date NOT NULL")]
		public System.DateTime DEBUTACCES
		{
			get
			{
				return this._DEBUTACCES;
			}
			set
			{
				if ((this._DEBUTACCES != value))
				{
					this.OnDEBUTACCESChanging(value);
					this.SendPropertyChanging();
					this._DEBUTACCES = value;
					this.SendPropertyChanged("DEBUTACCES");
					this.OnDEBUTACCESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FINACCES", DbType="Date NOT NULL")]
		public System.DateTime FINACCES
		{
			get
			{
				return this._FINACCES;
			}
			set
			{
				if ((this._FINACCES != value))
				{
					this.OnFINACCESChanging(value);
					this.SendPropertyChanging();
					this._FINACCES = value;
					this.SendPropertyChanged("FINACCES");
					this.OnFINACCESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_UTILISATEURSECTEUR", Storage="_UTILISATEUR", ThisKey="IDUTILISATEUR", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UTILISATEUR UTILISATEUR
		{
			get
			{
				return this._UTILISATEUR.Entity;
			}
			set
			{
				UTILISATEUR previousValue = this._UTILISATEUR.Entity;
				if (((previousValue != value) 
							|| (this._UTILISATEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UTILISATEUR.Entity = null;
						previousValue.UTILISATEURSECTEUR.Remove(this);
					}
					this._UTILISATEUR.Entity = value;
					if ((value != null))
					{
						value.UTILISATEURSECTEUR.Add(this);
						this._IDUTILISATEUR = value.ID;
					}
					else
					{
						this._IDUTILISATEUR = default(int);
					}
					this.SendPropertyChanged("UTILISATEUR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SECTEUR_UTILISATEURSECTEUR", Storage="_SECTEUR", ThisKey="IDSECTEUR", OtherKey="ID", IsForeignKey=true)]
		public SECTEUR SECTEUR
		{
			get
			{
				return this._SECTEUR.Entity;
			}
			set
			{
				SECTEUR previousValue = this._SECTEUR.Entity;
				if (((previousValue != value) 
							|| (this._SECTEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SECTEUR.Entity = null;
						previousValue.UTILISATEURSECTEUR.Remove(this);
					}
					this._SECTEUR.Entity = value;
					if ((value != null))
					{
						value.UTILISATEURSECTEUR.Add(this);
						this._IDSECTEUR = value.ID;
					}
					else
					{
						this._IDSECTEUR = default(int);
					}
					this.SendPropertyChanged("SECTEUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SECTEUR")]
	public partial class SECTEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NOM;
		
		private EntitySet<UTILISATEURSECTEUR> _UTILISATEURSECTEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNOMChanging(string value);
    partial void OnNOMChanged();
    #endregion
		
		public SECTEUR()
		{
			this._UTILISATEURSECTEUR = new EntitySet<UTILISATEURSECTEUR>(new Action<UTILISATEURSECTEUR>(this.attach_UTILISATEURSECTEUR), new Action<UTILISATEURSECTEUR>(this.detach_UTILISATEURSECTEUR));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string NOM
		{
			get
			{
				return this._NOM;
			}
			set
			{
				if ((this._NOM != value))
				{
					this.OnNOMChanging(value);
					this.SendPropertyChanging();
					this._NOM = value;
					this.SendPropertyChanged("NOM");
					this.OnNOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SECTEUR_UTILISATEURSECTEUR", Storage="_UTILISATEURSECTEUR", ThisKey="ID", OtherKey="IDSECTEUR")]
		public EntitySet<UTILISATEURSECTEUR> UTILISATEURSECTEUR
		{
			get
			{
				return this._UTILISATEURSECTEUR;
			}
			set
			{
				this._UTILISATEURSECTEUR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UTILISATEURSECTEUR(UTILISATEURSECTEUR entity)
		{
			this.SendPropertyChanging();
			entity.SECTEUR = this;
		}
		
		private void detach_UTILISATEURSECTEUR(UTILISATEURSECTEUR entity)
		{
			this.SendPropertyChanging();
			entity.SECTEUR = null;
		}
	}
}
#pragma warning restore 1591
